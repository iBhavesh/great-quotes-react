{"version":3,"sources":["components/layout/MainNavigation.module.css","components/quotes/QuoteForm.module.css","components/comments/NewCommentForm.module.css","components/layout/Layout.module.css","components/UI/Card.module.css","components/UI/LoadingSpinner.module.css","components/comments/Comments.module.css","components/quotes/HighlightedQuote.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/layout/MainNavigation.tsx","components/layout/Layout.tsx","components/UI/Card.tsx","components/UI/LoadingSpinner.tsx","components/quotes/QuoteForm.tsx","pages/NewQuote.tsx","components/comments/NewCommentForm.tsx","components/comments/Comments.tsx","components/quotes/HighlightedQuote.tsx","components/quotes/QuoteItem.tsx","components/quotes/QuoteList.tsx","pages/AllQuotes.tsx","pages/NotFound.tsx","pages/QuoteDetail.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","MainNavigation","className","classes","header","logo","nav","to","activeClassName","active","Layout","props","main","children","Card","card","LoadingSpinner","spinner","QuoteForm","authorInputRef","useRef","textInputRef","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","control","htmlFor","required","type","id","ref","rows","actions","NewQuote","data","console","log","NewCommentForm","commentTextRef","submitFormHandler","Comments","useState","isAddingComment","setIsAddingComment","comments","onClick","HighlightedQuote","quote","QuoteItem","item","QuoteList","list","quotes","map","DUMMY_QUOTES","Quotes","NotFound","QuoteDetail","params","useParams","find","quoteId","path","App","exact","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abdf389b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__pcWBd\",\"logo\":\"MainNavigation_logo__3mTft\",\"nav\":\"MainNavigation_nav__2KJfX\",\"active\":\"MainNavigation_active__oN3Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2Kyqv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","import { NavLink } from \"react-router-dom\";\nimport classes from \"./MainNavigation.module.css\";\n\nconst MainNavigation = () => {\n  return (\n    <header className={classes.header}>\n      <div className={classes.logo}>Great Quotes</div>\n      <nav className={classes.nav}>\n        <ul>\n          <li>\n            <NavLink to=\"/quotes\" activeClassName={classes.active}>\n              All Quotes\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/new-quote\" activeClassName={classes.active}>\n              Add a Quote\n            </NavLink>\n          </li>\n          {/* <li></li> */}\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainNavigation;\n","import { ReactNode } from \"react\";\nimport classes from \"./Layout.module.css\";\nimport MainNavigation from \"./MainNavigation\";\n\ntype Props = {\n  children: ReactNode;\n};\nconst Layout = (props: Props) => {\n  return (\n    <>\n      <MainNavigation />\n      <main className={classes.main}>{props.children}</main>\n    </>\n  );\n};\n\nexport default Layout;\n","import { ReactNode } from \"react\";\nimport classes from \"./Card.module.css\";\ntype Props = {\n  children: ReactNode;\n};\nconst Card = (props: Props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import { FormEventHandler, useRef } from \"react\";\nimport NewQuote from \"../../pages/NewQuote\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\ntype Props = {\n  onAddQuote: (arg0: NewQuote) => void;\n  isLoading: boolean;\n};\n\nconst QuoteForm = (props: Props) => {\n  const authorInputRef = useRef<HTMLInputElement | null>(null);\n  const textInputRef = useRef<HTMLTextAreaElement | null>(null);\n\n  const submitFormHandler: FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current!.value;\n    const enteredText = textInputRef.current!.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  };\n\n  return (\n    <Card>\n      <form className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor=\"author\">Author</label>\n          <input required type=\"text\" id=\"author\" ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"text\">Text</label>\n          <textarea required id=\"text\" rows={5} ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button className=\"btn\">Add Quote</button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuoteForm;\n","import QuoteForm from \"../components/quotes/QuoteForm\";\n\ntype NewQuote = {\n  author: string;\n  text: string;\n};\n\nconst NewQuote = () => {\n  const addQuoteHandler = (data: NewQuote) => {\n    console.log(data);\n  };\n  return <QuoteForm isLoading={false} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n","import { FormEventHandler, useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = () => {\n  const commentTextRef = useRef<HTMLTextAreaElement | null>(null);\n\n  const submitFormHandler: FormEventHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows={5} ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState } from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm />}\n      <p>Comments...</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from \"./HighlightedQuote.module.css\";\ntype Props = {\n  text: string;\n  author: string;\n};\nconst HighlightedQuote = (props: Props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\n\ntype Props = {\n  id: string;\n  text: string;\n  author: string;\n};\n\nconst QuoteItem = (props: Props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\ntype Props = {\n  quotes: any[];\n};\n\nconst QuoteList = (props: Props) => {\n  return (\n    <Fragment>\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import QuoteList from \"../components/quotes/QuoteList\";\n\nexport const DUMMY_QUOTES = [\n  {\n    id: \"q1\",\n    author: \"Mahatma Gandhi\",\n    text: \"An eye for an eye makes the whole world blind\",\n  },\n  {\n    id: \"q2\",\n    author: \"Zakir\",\n    text: \"Everyone is hero in their own story.\",\n  },\n  {\n    id: \"q3\",\n    author: \"Albert Einstein\",\n    text: \"If you want to live a happy life, tie it to a goal, not to people or things.\",\n  },\n];\n\nconst Quotes = () => {\n  return <QuoteList quotes={DUMMY_QUOTES} />;\n};\n\nexport default Quotes;\n","const NotFound = () => {\n  return (\n    <div className=\"centered\">\n      <p>Page Not Found!</p>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import { Route, useParams } from \"react-router\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport { DUMMY_QUOTES } from \"./AllQuotes\";\nimport NotFound from \"./NotFound\";\n\nconst QuoteDetail = () => {\n  const params = useParams<{ quoteId: string }>();\n  const quote = DUMMY_QUOTES.find((item) => item.id === params.quoteId);\n\n  if (!quote) {\n    return <NotFound />;\n  }\n\n  return (\n    <>\n      <HighlightedQuote text={quote.text} author={quote.author} />\n      <Route path=\"/quotes/:quoteId/:comments\">\n        <Comments />\n      </Route>\n    </>\n  );\n};\n\nexport default QuoteDetail;\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport \"./App.css\";\nimport Layout from \"./components/layout/Layout\";\nimport NewQuote from \"./pages/NewQuote\";\nimport QuoteDetail from \"./pages/QuoteDetail\";\nimport Quotes from \"./pages/AllQuotes\";\nimport NotFound from \"./pages/NotFound\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"quotes\" />\n        </Route>\n        <Route exact path=\"/quotes\">\n          <Quotes />\n        </Route>\n        <Route path=\"/quotes/:quoteId\">\n          <QuoteDetail />\n        </Route>\n        <Route path=\"/new-quote\">\n          <NewQuote />\n        </Route>\n        <Route path=\"*\">\n          <NotFound />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\n\nexport const store = configureStore({\n  reducer: {},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}